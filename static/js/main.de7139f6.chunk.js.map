{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","cardData","this","props","imageUrl","className","style","backgroundImage","process","transform","flipped","Component","App","state","numOfCards","cards","makeCard","daCard","deck","Math","floor","random","length","setState","concat","filter","card","document","getElementById","pointerEvents","opacity","JSON","parse","stringify","deckData","theCards","map","i","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"isCAqBeA,E,4JAjBX,WAAU,IACDC,EAAYC,KAAKC,MAAjBF,SACAG,EAAYH,EAAZG,SAEP,OACE,qBAAKC,UAAU,OAAf,SACE,qBAAKA,UAAU,UAAUC,MACvB,CACEC,gBAAgB,OAAD,OAASC,gBAAT,wBAA+CJ,EAA/C,KACfK,UAAYR,EAASS,QAAV,yC,GAVNC,a,OC0DJC,E,4MAtDbC,MAAQ,CACNC,WAAY,EACZC,MAAO,I,EAaTC,SAAW,WACT,IAAMC,EAAS,EAAKJ,MAAMK,KAAKC,KAAKC,MAAMD,KAAKE,SAAW,EAAKR,MAAMK,KAAKI,SAE1EL,EAAOP,QAAUS,KAAKE,SAAW,GAEjC,EAAKE,SAAS,CACZT,WAAY,EAAKD,MAAMC,WAAa,EACpCC,MAAO,EAAKF,MAAME,MAAMS,OAAOP,GAC/BC,KAAM,EAAKL,MAAMK,KAAKO,QAAO,SAAAC,GAAI,OAAIA,IAAST,OAG5C,EAAKJ,MAAME,MAAMO,QAAU,IAC7BK,SAASC,eAAe,cAActB,MAAMuB,cAAgB,OAC5DF,SAASC,eAAe,cAActB,MAAMwB,QAAU,Q,uDAvB1D,WAEE,IACOZ,EADgBa,KAAKC,MAAMD,KAAKE,UAAUC,IAC1ChB,KAEPhB,KAAKqB,SAAS,CACZL,KAAMA,M,oBAqBV,WAAU,IAAD,OAEDiB,EAAWjC,KAAKW,MAAME,MAAMqB,KAAK,SAACV,EAAMW,GAC5C,OAAO,cAAC,EAAD,CAAcpC,SAAU,EAAKY,MAAME,MAAMsB,IAA9BA,MAGpB,OACE,sBAAKhC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mDAEF,uBAAMA,UAAU,WAAhB,UACE,wBAAQA,UAAU,aAAaiC,GAAG,aAAaC,QAAS,kBAAM,EAAKvB,SAAS,EAAKH,MAAMK,OAAvF,0BACA,qBAAKb,UAAU,YAAf,SACG8B,c,GAhDKxB,aCOH6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,SAM1BY,M","file":"static/js/main.de7139f6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n      const {cardData} = this.props;\r\n      const {imageUrl} = cardData;\r\n\r\n      return (\r\n        <div className=\"card\">\r\n          <div className=\"pic-box\" style={\r\n            {\r\n              backgroundImage: `url(${process.env.PUBLIC_URL}/assets/card_${imageUrl})`,\r\n              transform: !cardData.flipped ? `rotate(180deg)` : `rotate(0deg)`\r\n            }\r\n          }></div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, {Component} from 'react';\nimport './App.css';\nimport Card from './Card';\nimport deckData from './Deck.json';\n\nclass App extends Component {\n\n  state = {\n    numOfCards: 0,\n    cards: []\n  };\n\n  componentDidMount() {\n\n    const loadDeck = () => JSON.parse(JSON.stringify(deckData));\n    const {deck} = loadDeck();\n\n    this.setState({\n      deck: deck\n    });\n  }\n\n  makeCard = () => {\n    const daCard = this.state.deck[Math.floor(Math.random() * this.state.deck.length)];\n\n    daCard.flipped = Math.random() < 0.5;\n\n    this.setState({\n      numOfCards: this.state.numOfCards + 1,\n      cards: this.state.cards.concat(daCard),\n      deck: this.state.deck.filter(card => card !== daCard)\n    });\n\n    if (this.state.cards.length >= 4) {\n      document.getElementById('make-cards').style.pointerEvents = \"none\";\n      document.getElementById('make-cards').style.opacity = \"0.5\";\n    }\n  }\n\n  render() {\n\n    const theCards = this.state.cards.map( (card, i) => {\n      return <Card key={i} cardData={this.state.cards[i]} />\n    });\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tarokka Reading</h1>\n        </header>\n        <main className=\"App-main\">\n          <button className=\"make-cards\" id=\"make-cards\" onClick={() => this.makeCard(this.state.deck)}>Make a Card!</button>\n          <div className=\"cards-box\">\n            {theCards}  \n          </div>\n        </main>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}