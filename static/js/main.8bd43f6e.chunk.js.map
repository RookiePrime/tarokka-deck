{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["revealCard","cardNum","cardData","daCard","document","getElementById","daPicBox","children","className","innerHTML","setTimeout","style","backgroundImage","process","imageUrl","Card","props","description","id","onClick","transform","flipped","getReading","commons","highs","reading","i","card","makeCard","filter","aCard","name","push","deck","Math","floor","random","length","App","useState","cards","addCards","changeCommons","changeHighs","useEffect","deckData","commonDeck","highDeck","theCards","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6gZAyBMA,EAAa,SAACC,EAASC,GAC3B,IAAMC,EAASC,SAASC,eAAeJ,GACjCK,EAAWH,EAAOI,SAAS,GAEjCJ,EAAOK,UAAY,gBACnBL,EAAOI,SAAS,GAAGE,UAAY,GAE/BC,YAAW,WACTJ,EAASK,MAAMC,gBAAf,cAAwCC,gBAAxC,wBAA8EX,EAASY,SAAvF,OACC,MAGUC,EAlCF,SAAAC,GAAU,IACdd,EAAqBc,EAArBd,SAAUD,EAAWe,EAAXf,QACVgB,EAAef,EAAfe,YAEL,OACE,sBAAKT,UAAU,OAAOU,GAAE,cAASjB,GAAWkB,QAAS,kBAAMnB,EAAW,OAAD,OAAQC,GAAWC,IAAxF,UACE,qBAAKM,UAAU,QAAf,SAAwBP,EAAU,IAClC,qBAAKO,UAAU,UAAUG,MACvB,CACES,UAAYlB,EAASmB,QAAV,uDAFf,SAKE,qBAAKb,UAAU,WAAWG,MACxB,CACES,UAAYlB,EAASmB,QAAV,iCAFf,SAIE,4BAAIJ,Y,OCcVK,EAAa,SAACC,EAASC,GAG3B,IAFA,IAAMC,EAAU,GADqB,WAG5BC,GACP,IACMC,EAAOC,EADAF,EAAI,EAAIH,EAAUC,GAG/BD,EAAUA,EAAQM,QAAO,SAAAC,GAAK,OAAIA,EAAMC,OAASJ,EAAKI,QACtDP,EAAQA,EAAMK,QAAO,SAAAC,GAAK,OAAIA,EAAMC,OAASJ,EAAKI,QAElDN,EAAQO,KAAKL,IAPND,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAST,OAAOD,GAGHG,EAAW,SAAAK,GACf,IAAM9B,EAAS8B,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,SAIpD,OAFAlC,EAAOkB,QAAUa,KAAKE,SAAW,GAE1BjC,GAGMmC,EAnDH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGiBF,mBAAS,IAH1B,mBAGThB,EAHS,KAGAmB,EAHA,OAIaH,mBAAS,IAJtB,mBAITf,EAJS,KAIFmB,EAJE,KAMhBC,qBAAW,WACTF,EAAcG,EAASC,YACvBH,EAAYE,EAASE,YACpB,IAEH,IAAMC,EAAWR,EAAMS,KAAK,SAACtB,EAAMD,GAAP,OAAa,cAAC,EAAD,CAAMR,GAAE,cAASQ,GAAyBxB,SAAUsC,EAAMd,GAAIzB,QAASyB,GAA5Cc,EAAMd,GAAGK,SAE7E,OACE,sBAAKvB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,iDACA,wBAAQA,UAAU,aAAaU,GAAG,aAAaC,QAAS,kBAAMsB,EAASnB,EAAWC,EAASC,KAA3F,kCAEF,sBAAMhB,UAAU,WAAhB,SACE,qBAAKU,GAAG,YAAR,SACG8B,UCdIE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzD,SAASC,eAAe,SAM1B6C,M","file":"static/js/main.8bd43f6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  const {cardData, cardNum} = props;\r\n  const {description} = cardData;\r\n\r\n    return (\r\n      <div className=\"card\" id={`card${cardNum}`} onClick={() => revealCard(`card${cardNum}`, cardData)}>\r\n        <div className=\"order\">{cardNum + 1}</div>\r\n        <div className=\"pic-box\" style={\r\n          {\r\n            transform: !cardData.flipped ? `rotate(180deg) scaleX(-1)` : `rotate(0deg) scaleX(-1)`\r\n          }\r\n        }>\r\n          <div className=\"text-box\" style={\r\n            {\r\n              transform: !cardData.flipped ? `rotate(180deg)`:  `rotate(0deg)`\r\n            }\r\n          }><p>{description}</p></div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst revealCard = (cardNum, cardData) => {\r\n  const daCard = document.getElementById(cardNum);\r\n  const daPicBox = daCard.children[1];\r\n\r\n  daCard.className = \"card revealed\";\r\n  daCard.children[0].innerHTML = \"\";\r\n\r\n  setTimeout(() => {\r\n    daPicBox.style.backgroundImage = `url(${process.env.PUBLIC_URL}/assets/card_${cardData.imageUrl})`;\r\n  }, 200);\r\n}\r\n\r\nexport default Card;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Card from './Card';\r\nimport deckData from './Deck.json';\r\n\r\nconst App = () => {\r\n\r\n  const [cards, addCards] = useState([]);\r\n  const [commons, changeCommons] = useState([]);\r\n  const [highs, changeHighs] = useState([]);\r\n\r\n  useEffect( () => {\r\n    changeCommons(deckData.commonDeck);\r\n    changeHighs(deckData.highDeck);\r\n  }, []);\r\n\r\n  const theCards = cards.map( (card, i) => <Card id={`card${i}`} key={cards[i].name} cardData={cards[i]} cardNum={i} />);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Tarokka Reading</h1>\r\n        <button className=\"make-cards\" id=\"make-cards\" onClick={() => addCards(getReading(commons, highs))}>See your Fortune!</button>\r\n      </header>\r\n      <main className=\"App-main\">\r\n        <div id=\"cards-box\">\r\n          {theCards}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst getReading = (commons, highs) => {\r\n  const reading = [];\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    const deck = i < 3 ? commons : highs;\r\n    const card = makeCard(deck);\r\n    \r\n    commons = commons.filter(aCard => aCard.name !== card.name);\r\n    highs = highs.filter(aCard => aCard.name !== card.name);\r\n\r\n    reading.push(card);\r\n  }\r\n  return reading;\r\n}\r\n\r\nconst makeCard = deck => {\r\n  const daCard = deck[Math.floor(Math.random() * deck.length)];\r\n\r\n  daCard.flipped = Math.random() > 0.5;\r\n\r\n  return daCard;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}