{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","cardData","imageUrl","description","className","style","backgroundImage","process","transform","flipped","getReading","commons","highs","reading","i","push","makeCard","console","log","deck","daCard","Math","floor","random","length","App","useState","cards","addCards","changeCommons","changeHighs","useEffect","fetch","then","JSON","parse","stringify","deckData","commonDeck","highDeck","theCards","map","card","name","id","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6gZAyBeA,EAtBF,SAAAC,GAAU,IACdC,EAAYD,EAAZC,SACAC,EAAyBD,EAAzBC,SAAUC,EAAeF,EAAfE,YAEf,OACE,qBAAKC,UAAU,OAAf,SACE,qBAAKA,UAAU,UAAUC,MACvB,CACEC,gBAAgB,OAAD,OAASC,gBAAT,wBAA+CL,EAA/C,KACfM,UAAYP,EAASQ,QAAV,iCAHf,SAME,qBAAKL,UAAU,WAAWC,MACxB,CACEG,UAAYP,EAASQ,QAAV,iCAFf,SAIE,4BAAIN,W,OCkBVO,EAAa,SAACC,EAASC,GAG3B,IAFA,IAAMC,EAAU,GAEPC,EAAI,EAAGA,EAAI,EAAGA,IACrBA,EAAI,EAAID,EAAQE,KAAKC,EAASL,IAAYE,EAAQE,KAAKC,EAASJ,IAIlE,OAFAK,QAAQC,IAAIL,GAELA,GAGHG,EAAW,SAAAG,GACf,IAAMC,EAASD,EAAKE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,SAIpD,OAFAJ,EAAOX,QAAUY,KAAKE,SAAW,GAE1BH,GAGMK,EAnDH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGiBF,mBAAS,IAH1B,mBAGTf,EAHS,KAGAkB,EAHA,OAIaH,mBAAS,IAJtB,mBAITd,EAJS,KAIFkB,EAJE,KAMhBC,qBAAU,WACRC,MAAM,eACHC,MAAK,kBAAMC,KAAKC,MAAMD,KAAKE,UAAUC,OACrCJ,MAAK,SAAAd,GACJU,EAAcV,EAAKmB,YACnBR,EAAYX,EAAKoB,eAElB,IAEL,IAAMC,EAAWb,EAAMc,KAAK,SAACC,EAAM5B,GAAP,OAAa,cAAC,EAAD,CAA0Bb,SAAU0B,EAAMb,IAA/Ba,EAAMb,GAAG6B,SAE7D,OACE,sBAAKvC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mDAEF,uBAAMA,UAAU,WAAhB,UACE,wBAAQA,UAAU,aAAawC,GAAG,aAAaC,QAAS,kBAAMjB,EAASlB,EAAWC,EAASC,KAA3F,+BACA,qBAAKgC,GAAG,YAAR,SACGJ,WClBIM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5fceac3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  const {cardData} = props;\r\n  const {imageUrl, description} = cardData;\r\n\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"pic-box\" style={\r\n          {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/assets/card_${imageUrl})`,\r\n            transform: !cardData.flipped ? `rotate(180deg)` : `rotate(0deg)`\r\n          }\r\n        }>\r\n          <div className=\"text-box\" style={\r\n            {\r\n              transform: !cardData.flipped ? `rotate(180deg)`:  `rotate(0deg)`\r\n            }\r\n          }><p>{description}</p></div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Card from './Card';\r\nimport deckData from './Deck.json';\r\n\r\nconst App = () => {\r\n\r\n  const [cards, addCards] = useState([]);\r\n  const [commons, changeCommons] = useState([]);\r\n  const [highs, changeHighs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"./Deck.json\")\r\n      .then(() => JSON.parse(JSON.stringify(deckData)))\r\n      .then(deck => {\r\n        changeCommons(deck.commonDeck);\r\n        changeHighs(deck.highDeck);\r\n      });\r\n    }, []);\r\n\r\n  const theCards = cards.map( (card, i) => <Card key={cards[i].name} cardData={cards[i]} />);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Tarokka Reading</h1>\r\n      </header>\r\n      <main className=\"App-main\">\r\n        <button className=\"make-cards\" id=\"make-cards\" onClick={() => addCards(getReading(commons, highs))}>See your Fortune!</button>\r\n        <div id=\"cards-box\">\r\n          {theCards}  \r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst getReading = (commons, highs) => {\r\n  const reading = [];\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    i < 3 ? reading.push(makeCard(commons)) : reading.push(makeCard(highs));\r\n  }\r\n  console.log(reading);\r\n\r\n  return reading;\r\n}\r\n\r\nconst makeCard = deck => {\r\n  const daCard = deck[Math.floor(Math.random() * deck.length)];\r\n\r\n  daCard.flipped = Math.random() > 0.5;\r\n\r\n  return daCard;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}